/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sudoku_functions.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghochart <ghochart@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2014/09/17 10:17:33 by ghochart          #+#    #+#             */
/*   Updated: 2014/09/17 10:17:33 by ghochart         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "ft_sudoku_functions.h"

int		check_case(int line, int column, char **sudoku)
{
	char	c;

	if (line == 9 && column == 0)
		return (1);
	if (sudoku[line][column] != '.')
		return (check_case(line + (column + 1) / 9, (column + 1) % 9, sudoku));
	c = '1';
	while (c <= '9')
	{
		if (is_on_square(c, line - line % 3, column - column % 3, sudoku) == 0
			&& is_on_line(c, line, sudoku) == 0
			&& is_on_column(c, column, sudoku) == 0)
		{
			sudoku[line][column] = c;
			if (check_case(line + (column + 1) / 9, (column + 1) % 9, sudoku))
				return (1);
		}
		c++;
	}
	sudoku[line][column] = '.';
	return (0);
}

void	print_sudoku(char **sudoku)
{
	int		i;
	int		j;

	i = 0;
	while (i < 9)
	{
		j = 0;
		while (j < 9)
		{
			ft_putchar(sudoku[i][j]);
			ft_putchar(' ');
			j++;
		}
		ft_putchar('\n');
		i++;
	}
}

int		check_erreurs(char **argv)
{
	int     l;
    int     c;

	l = 1;
	while (l < 10)
	{
		c = 0;
		while (c < 9)
		{
			if (!((argv[l][c] >= '1' && argv[l][c] <= '9') ||
				  argv[l][c] == '.'))
				return (0);
			c++;
		}
		if (argv[l][9])
			return (0);
		l++;
	}
	return (1);
}

void	solve_sudoku(char **argv)
{
	int		i;
	int		j;
	char	**sudoku;

	sudoku = (char**)malloc(sizeof(char*) * 9);
	i = 0;
	while (i < 9)
	{
		sudoku[i] = (char*)malloc(sizeof(char) * 9);
		i++;
	}
	i = 0;
	while (i < 9)
	{
		j = 0;
		while (j < 9)
		{
			sudoku[i][j] = argv[i + 1][j];
			j++;
		}
		i++;
	}
	check_case(0, 0, sudoku);
	print_sudoku(sudoku);
}
